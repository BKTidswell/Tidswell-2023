---
title: "Parallax Testing"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(ggplot2)
library(bbmle) #For ICtab
library(car)
library(ggpubr)
library(ggdist)
library(emmeans)
library(viridis)

```

## Functions and Variables

```{r}
rad2deg <- function(rad) {(rad * 180) / (pi)}
deg2rad <- function(deg) {(deg * pi) / (180)}
round_any <- function(x, accuracy, f=round){f(x/ accuracy) * accuracy}
ang_mean <- function(x){rad2deg(atan2(mean(sin(deg2rad(x))),mean(cos(deg2rad(x)))))}

fold_angle_0_360_to_0_180 <- function(x){abs(abs(x-180)-180)}

fold_angle_neg_180_180_to_neg_90_90 <- function(x){ifelse(x > 90,90-abs(90-x),ifelse(x < -90, -90+abs(-90-x), x))}

min_n <- function(x,n){sort(x)[1:n]}
max_n <- function(x,n){sort(x,decreasing = TRUE)[1:n]}

light_no_ab_color = "#d4d7dd"
light_ab_color = "#f5ba9e"
dark_no_ab_color = "#5e94d4"
sim_color = "#777777"

flow_split_still = "#F59DE2"
flow_split_flow = "#5DD492"

dark_split_light = "#5e94d4"
dark_split_dark = "#011627"

tailbeat_len = 19

allowed_flow_type = c("Still Water","Flowing Water (2 BL/s)")

dot_binwidth = 0.0125
```


```{r}
para_vals <- read.csv("Data/Parallax_Distances.csv") %>% mutate(BLs = Distance / 200)

breaks <- c("0.1")

ggplot(para_vals, aes(X, Y, z = BLs))+
  geom_contour_filled(bins = 5, params = c(linewidth = 20))+
  scale_fill_viridis_d("Projection Error (BL)", 
                       labels = c("< 0.1", "0.1 - 0.2", "0.2 - 0.3","0.3 - 0.4","0.4 - 0.5"))+
  theme_classic()+
  coord_fixed() +
  ylab("Vertical Distance from Principal Point (pixels)")+
  xlab("Hoizontal Distance from Principal Point (pixels)")
```


Ignore everything below this, I'm just making a simple graph of predicted values


```{r}
data_2d <- read.csv("Data/Fish_Comp_Values.csv") %>% mutate(Flow = ifelse(Flow == "0", "Flow 0", "Flow 2")) %>%
                           mutate(Ablation = ifelse(Ablation == "N", "No Ablation", "Ablated")) %>%
                           mutate(Darkness = ifelse(Darkness == "N", "Light", "Dark")) %>%
                           mutate(Speed_Diff = abs(Speed_Diff)) %>%
                           mutate(Heading_Diff = abs(Heading_Diff))

data_3d_xy <- read.csv("Data/Fish_Comp_Values_3D_xy.csv") %>% mutate(Flow = ifelse(Flow == "0", "Flow 0", "Flow 2")) %>%
                           mutate(Ablation = ifelse(Ablation == "N", "No Ablation", "Ablated")) %>%
                           mutate(Darkness = ifelse(Darkness == "N", "Light", "Dark")) %>%
                           mutate(Speed_Diff = abs(Speed_Diff)) %>%
                           mutate(Heading_Diff = abs(Heading_Diff))

data_3d <- read.csv("Data/Fish_Comp_Values_3D.csv") %>% mutate(Flow = ifelse(Flow == "0", "Flow 0", "Flow 2")) %>%
                           mutate(Ablation = ifelse(Ablation == "N", "No Ablation", "Ablated")) %>%
                           mutate(Darkness = ifelse(Darkness == "N", "Light", "Dark")) %>%
                           mutate(Speed_Diff = abs(Speed_Diff)) %>%
                           mutate(Heading_Diff = abs(Yaw.Heading_Diff))
```

```{r}

data_2d_still_sum <- data_2d %>% filter(Darkness == "Light" & Ablation == "No Ablation") %>%
                                  mutate(round_fish1_x = round_any(Fish1_X/193,0.25),
                                         round_fish1_y = round_any(Fish1_Y/193,0.25)) %>%
                                  group_by(round_fish1_x,round_fish1_y) %>%
                                  summarise(mean_dist_2d = mean(Distance, na.rm = TRUE)) %>%
                                  ungroup()

data_3d_xy_still_sum <- data_3d_xy %>% filter(Darkness == "Light" & Ablation == "No Ablation") %>%
                                  mutate(round_fish1_x = round_any(Fish1_X/0.07862,0.25),
                                         round_fish1_y = round_any(Fish1_Y/0.07862,0.25)) %>%
                                  group_by(round_fish1_x,round_fish1_y) %>%
                                  summarise(mean_dist_3d_xy = mean(Distance, na.rm = TRUE)) %>%
                                  ungroup()

data_both <- full_join(data_3d_xy_still_sum, data_2d_still_sum) %>% na.omit() %>%
                      mutate(dist_diff = mean_dist_3d_xy - mean_dist_2d)



```

Graphing NND in 2D

```{r}
ggplot(data_2d_still_sum, aes(round_fish1_x,round_fish1_y, color = mean_dist_2d))+
  geom_point(size = 4, shape = 15)+
  scale_color_viridis() +
  theme_classic() +
  coord_fixed()

ggplot(data_3d_xy_still_sum, aes(round_fish1_x,round_fish1_y, color = mean_dist_3d_xy))+
  geom_point(size = 2, shape = 15)+
  scale_color_viridis() +
  theme_classic() +
  coord_fixed()

ggplot(data_both, aes(round_fish1_x,round_fish1_y, color = dist_diff))+
  geom_point(size = 8, shape = 15)+
  scale_color_viridis() +
  theme_classic() +
  coord_fixed()

ggplot(data_both, aes(round_fish1_x,dist_diff))+
  geom_point()+
  geom_smooth(method = "glm", formula = "y ~ poly(x,2)")+ 
  theme_classic()

ggplot(data_both, aes(round_fish1_y,dist_diff))+
  geom_point()+
  geom_smooth(method = "glm", formula = "y ~ poly(x,2)")+
  theme_classic()
```

```{r}

xy_glm <- glm(dist_diff ~ round_fish1_x + round_fish1_y, data = data_both)
x2y_glm <- glm(dist_diff ~ I(round_fish1_x^2) + round_fish1_y, data = data_both)
xy2_glm <- glm(dist_diff ~ round_fish1_x + I(round_fish1_y^2), data = data_both)
xx2y_glm <- glm(dist_diff ~ round_fish1_x + I(round_fish1_x^2) + round_fish1_y, data = data_both)
xyy2_glm <- glm(dist_diff ~ round_fish1_x + round_fish1_y + I(round_fish1_y^2), data = data_both)
x2y2_glm <- glm(dist_diff ~ I(round_fish1_x^2) + I(round_fish1_y^2), data = data_both)

xx2y_m_glm <- glm(dist_diff ~ (round_fish1_x + I(round_fish1_x^2)) * round_fish1_y, data = data_both)

ICtab(xy_glm,x2y_glm,xy2_glm,xx2y_glm,xyy2_glm,x2y2_glm,xx2y_m_glm)

Anova(xx2y_m_glm)

data_both <- data_both %>% mutate(modeled = predict(xx2y_m_glm))


ggplot(data_both, aes(round_fish1_x,round_fish1_y, color = modeled))+
  geom_point(size = 8, shape = 15)+
  scale_color_viridis() +
  theme_classic() +
  coord_fixed()


```

#Trying a full join for distances

```{r}

data_2d_merging <- data_2d %>% select(c(Year,Month,Day,Trial,Fish,Tailbeat_Num,Distance,Fish1_X,Fish1_Y,Fish2_X,Fish2_Y))
data_3d_merging <- data_3d_xy %>% select(c(Year,Month,Day,Trial,Fish,Tailbeat_Num,Distance))

data_2d_merging <- data_2d_merging %>% rename(Distance_2D = Distance)
data_3d_merging <- data_3d_merging %>% rename(Distance_3D = Distance)

merged_data <- inner_join(data_2d_merging,data_3d_merging) %>% mutate(Distance_Diff = Distance_2D - Distance_3D) %>% drop_na(Distance_Diff) %>% filter(Distance_Diff < 5)


merged_data <- merged_data %>% mutate(Fish_Mid_X = (Fish1_X + Fish2_X)/2,
                                      Fish_Mid_Y = (Fish1_Y + Fish2_Y)/2)
```


```{r}
ggplot(merged_data, aes(x = Distance_Diff)) +
  geom_histogram()+
  theme_classic()

ggplot(merged_data, aes(x = Fish_Mid_X, y = Fish_Mid_Y, color = Distance_Diff))+
  geom_point()+
  scale_color_viridis() +
  theme_classic()

ggplot(merged_data, aes(x = Fish_Mid_X, y = Fish_Mid_Y, z = Distance_Diff))+
  stat_summary_2d(bins = 20, fun = mean) +
  scale_fill_viridis() +
  theme_classic()

ggplot(merged_data, aes(x = Fish_Mid_X, y = Distance_Diff))+
  geom_point()+
  geom_smooth(se = F, method = "glm", formula = y ~ poly(x,2)) +
  theme_classic()


ggplot(merged_data, aes(x = Fish_Mid_Y, y = Distance_Diff))+
  geom_point()+
  geom_smooth(se = F, method = "glm", formula = y ~ poly(x,2)) +
  theme_classic()
```

```{r}
xy_glm <- glm(Distance_Diff ~ Fish_Mid_X + Fish_Mid_Y, data = merged_data)
x2y_glm <- glm(Distance_Diff ~ I(Fish_Mid_X^2) + Fish_Mid_Y, data = merged_data)
xy2_glm <- glm(Distance_Diff ~ Fish_Mid_X + I(Fish_Mid_Y^2), data = merged_data)
xx2y_glm <- glm(Distance_Diff ~ Fish_Mid_X + I(Fish_Mid_X^2) + Fish_Mid_Y, data = merged_data)
xyy2_glm <- glm(Distance_Diff ~ Fish_Mid_X + Fish_Mid_Y + I(Fish_Mid_Y^2), data = merged_data)
x2y2_glm <- glm(Distance_Diff ~ I(Fish_Mid_X^2) + I(Fish_Mid_Y^2), data = merged_data)

ICtab(xy_glm,x2y_glm,xy2_glm,xx2y_glm,xyy2_glm,x2y2_glm)
```



